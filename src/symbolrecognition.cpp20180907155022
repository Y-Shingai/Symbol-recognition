// -*- C++ -*-
/*!
 * @file  symbolrecognition.cpp
 * @brief ModuleDescription
 * @date $Date$
 *
 * $Id$
 */

#include "symbolrecognition.h"
#pragma warning(disable:4819)
//OpenCV
# include <iostream>
# include <opencv2/core/core.hpp>
# include <opencv2/imgproc/imgproc.hpp>
# include <opencv2/highgui/highgui.hpp>

#define WIDTH 640
#define HEIGHT 480

using namespace std;
using namespace cv;

// Module specification
// <rtc-template block="module_spec">
static const char* symbolrecognition_spec[] =
  {
    "implementation_id", "symbolrecognition",
    "type_name",         "symbolrecognition",
    "description",       "ModuleDescription",
    "version",           "1.0.0",
    "vendor",            "yukiya shingai",
    "category",          "example",
    "activity_type",     "PERIODIC",
    "kind",              "DataFlowComponent",
    "max_instance",      "1",
    "language",          "C++",
    "lang_type",         "compile",
    ""
  };
// </rtc-template>

/*!
 * @brief constructor
 * @param manager Maneger Object
 */
symbolrecognition::symbolrecognition(RTC::Manager* manager)
    // <rtc-template block="initializer">
  : RTC::DataFlowComponentBase(manager),
    m_driveOut("drive", m_drive)

    // </rtc-template>
{
}

/*!
 * @brief destructor
 */
symbolrecognition::~symbolrecognition()
{
}

VideoCapture cap;


RTC::ReturnCode_t symbolrecognition::onInitialize()
{
  // Registration: InPort/OutPort/Service
  // <rtc-template block="registration">
  // Set InPort buffers
  
  // Set OutPort buffer
  addOutPort("drive", m_driveOut);
  
  // Set service provider to Ports
  
  // Set service consumers to Ports
  
  // Set CORBA Service Ports
  
  // </rtc-template>

  // <rtc-template block="bind_config">
  // </rtc-template>

  cout << "カメラ起動" << endl;

  cap = VideoCapture(0);
  cap.set(CV_CAP_PROP_FRAME_WIDTH, WIDTH);
  cap.set(CV_CAP_PROP_FRAME_HEIGHT, HEIGHT);

  if (!cap.isOpened()) {
	  return RTC::RTC_ERROR;
  }
  
  return RTC::RTC_OK;
}

/*
RTC::ReturnCode_t symbolrecognition::onFinalize()
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t symbolrecognition::onStartup(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t symbolrecognition::onShutdown(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/


RTC::ReturnCode_t symbolrecognition::onActivated(RTC::UniqueId ec_id)
{
	cout << "記号を認識させよう" << endl;
	namedWindow("search image", CV_WINDOW_AUTOSIZE | CV_WINDOW_FREERATIO);
  return RTC::RTC_OK;
}


RTC::ReturnCode_t symbolrecognition::onDeactivated(RTC::UniqueId ec_id)
{
	cout << "DstroyallWindow" << endl;
	destroyAllWindows();
  return RTC::RTC_OK;
}


RTC::ReturnCode_t symbolrecognition::onExecute(RTC::UniqueId ec_id)
{
	
	//テンプレート画像
	Mat tmp_imgs[4];
	tmp_imgs[0] = imread("C:/Users/新階幸也/workspace/Symbol recognition/src/houkou/mae.png", 1);
	tmp_imgs[1] = imread("C:/Users/新階幸也/workspace/Symbol recognition/src/houkou/usiro.png", 1);
	tmp_imgs[2] = imread("C:/Users/新階幸也/workspace/Symbol recognition/src/houkou/hidarisenkai.png", 1);
	tmp_imgs[3] = imread("C:/Users/新階幸也/workspace/Symbol recognition/src/houkou/migisenkai.png", 1);
	if (!tmp_imgs[0].data || !tmp_imgs[1].data || !tmp_imgs[2].data || !tmp_imgs[3].data) {
		cout << "テンプレやで" << endl;
		return RTC::RTC_ERROR;
	}

	//枠線の色
	Scalar cols[4];
	cols[0] = Scalar(0, 255, 0);
	cols[1] = Scalar(255, 0, 0);
	cols[2] = Scalar(0, 0, 255);
	cols[3] = Scalar(0, 255, 255);

	while (1) {
		//探索画像
		Mat search_img0;
		cap >> search_img0;
		Mat search_img;
		search_img0.copyTo(search_img);

		/////直進を表示
		Mat &tmp_img0 = tmp_imgs[0];
		Mat result_img0;
		//15個検出する
		for (int i = 0; i < 15; i++) {
			//テンプレートマッチング
			matchTemplate(search_img, tmp_img0, result_img0, CV_TM_CCOEFF_NORMED);
			//最大のスコアの場所を探す
			Rect roi_rect(0, 0, tmp_img0.cols, tmp_img0.rows);
			Point max_pt;
			double maxVal;
			minMaxLoc(result_img0, NULL, &maxVal, NULL, &max_pt);
			//一定スコア以下の場合は処理終了
			if (maxVal < 0.7) break;

			roi_rect.x = max_pt.x;
			roi_rect.y = max_pt.y;
			cout << "直進" << endl;
			//探索結果の場所に矩形を描画
			rectangle(search_img0, roi_rect, cols[0], 3);
			rectangle(search_img, roi_rect, Scalar(0, 0, 255), CV_FILLED); 
		}

		////後退を表示
		Mat &tmp_img1 = tmp_imgs[1];
		Mat result_img1;
		//15個検出する
		for (int i = 0; i < 15; i++) {
			//テンプレートマッチング
			matchTemplate(search_img, tmp_img1, result_img1, CV_TM_CCOEFF_NORMED);
			//最大のスコアの場所を探す
			Rect roi_rect(0, 0, tmp_img1.cols, tmp_img1.rows);
			Point max_pt;
			double maxVal;
			minMaxLoc(result_img1, NULL, &maxVal, NULL, &max_pt);
			//一定スコア以下の場合は処理終了
			if (maxVal < 0.7) break;

			roi_rect.x = max_pt.x;
			roi_rect.y = max_pt.y;
			cout << "後退" << endl;
			//探索結果の場所に矩形を描画
			rectangle(search_img0, roi_rect, cols[1], 3);
			rectangle(search_img, roi_rect, Scalar(0, 0, 255), CV_FILLED);
		}

		/////左旋回
		Mat &tmp_img2 = tmp_imgs[2];
		Mat result_img2;
		//15個検出する
		for (int i = 0; i < 15; i++) {
			//テンプレートマッチング
			matchTemplate(search_img, tmp_img2, result_img2, CV_TM_CCOEFF_NORMED);
			//最大のスコアの場所を探す
			Rect roi_rect(0, 0, tmp_img2.cols, tmp_img2.rows);
			Point max_pt;
			double maxVal;
			minMaxLoc(result_img2, NULL, &maxVal, NULL, &max_pt);
			//一定スコア以下の場合は処理終了
			if (maxVal < 0.65) break;

			roi_rect.x = max_pt.x;
			roi_rect.y = max_pt.y;
			cout << "左旋回" << endl;
			//探索結果の場所に矩形を描画
			rectangle(search_img0, roi_rect, cols[2], 3);
			rectangle(search_img, roi_rect, Scalar(0, 0, 255), CV_FILLED);
		}

		////右旋回
		Mat &tmp_img3 = tmp_imgs[3];
		Mat result_img3;
		//15個検出する
		for (int i = 0; i < 15; i++) {
			//テンプレートマッチング
			matchTemplate(search_img, tmp_img3, result_img3, CV_TM_CCOEFF_NORMED);
			//最大のスコアの場所を探す
			Rect roi_rect(0, 0, tmp_img3.cols, tmp_img3.rows);
			Point max_pt;
			double maxVal;
			minMaxLoc(result_img3, NULL, &maxVal, NULL, &max_pt);
			//一定スコア以下の場合は処理終了
			if (maxVal < 0.65) break;

			roi_rect.x = max_pt.x;
			roi_rect.y = max_pt.y;
			cout << "右旋回" << endl;
			//探索結果の場所に矩形を描画
			rectangle(search_img0, roi_rect, cols[3], 3);
			rectangle(search_img, roi_rect, Scalar(0, 0, 255), CV_FILLED);
		}

		imshow("search image", search_img0);


	}

	m_driveOut.write();
	return RTC::RTC_OK;
}

/*
RTC::ReturnCode_t symbolrecognition::onAborting(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t symbolrecognition::onError(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t symbolrecognition::onReset(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t symbolrecognition::onStateUpdate(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t symbolrecognition::onRateChanged(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/



extern "C"
{
 
  void symbolrecognitionInit(RTC::Manager* manager)
  {
    coil::Properties profile(symbolrecognition_spec);
    manager->registerFactory(profile,
                             RTC::Create<symbolrecognition>,
                             RTC::Delete<symbolrecognition>);
  }
  
};


